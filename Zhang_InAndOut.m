function  Zhang_InAndOut
%      本m文件用来求解内参数和外参数并优化。
%      求解过称共用六幅图像，每幅图像取10个点。先求出每个图像的单应矩阵，然后把六个单应矩阵和在一起，
%      由V*b=0解出b。再然后用b分解出内参数矩阵A，最后由A和单应矩阵求出外参数矩阵

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                 以下从文本中读出世界坐标和对应的图像坐标                              %                           
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  
n = 24;
M=load('board.txt');       %读取世界坐标
M=[M';ones(1,49)];
m_all=load('speckle_150_20_snd_100.txt');       %读取关键点坐标
m_one=ones(3,49,n);
for i=1:1:n
    m_temp = m_all((i-1)*49+1:i*49,:);
    m_one(:,:,i) = [m_temp';ones(1,49)];
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                        以下求解单应矩阵并解出b                                      %                           
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 

H = ones(3,3,n);   %每幅图一个单应矩阵
for i=1:1:n
    H(:,:,i)=homography(m_one(:,:,i),M);
end

V=ones(2*n,6);           %V*b=0
for i=1:n               %求V
    V(2*i-1,:)=[H(1,1,i)*H(1,2,i) H(1,1,i)*H(2,2,i)+H(2,1,i)*H(1,2,i) H(2,1,i)*H(2,2,i) ...
                H(3,1,i)*H(1,2,i)+H(1,1,i)*H(3,2,i) H(3,1,i)*H(2,2,i)+H(2,1,i)*H(3,2,i) H(3,1,i)*H(3,2,i)];
    p1=[H(1,1,i)^2 H(1,1,i)*H(2,1,i)+H(2,1,i)*H(1,1,i) H(2,1,i)^2 H(3,1,i)*H(1,1,i)+H(1,1,i)*H(3,1,i) H(3,1,i)*H(2,1,i)+H(2,1,i)*H(3,1,i) H(3,1,i)^2];
    p2=[H(1,2,i)^2 H(1,2,i)*H(2,2,i)+H(2,2,i)*H(1,2,i) H(2,2,i)^2 H(3,2,i)*H(1,2,i)+H(1,2,i)*H(3,2,i) H(3,2,i)*H(2,2,i)+H(2,2,i)*H(3,2,i) H(3,2,i)^2];
    V(2*i,:)=p1-p2;
end;
[u s v]=svd(V);        %用正交分解解出b
b=v(:,6);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                        以下分解内参数矩阵                                            %                           
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  

cy=(b(2)*b(4)-b(1)*b(5))/(b(1)*b(3)-b(2)^2);
lamda=b(6)-(b(4)^2+(b(2)*b(4)-b(1)*b(5))/(b(1)*b(3)-b(2)^2)*(b(2)*b(4)-b(1)*b(5)))/b(1);
kx=sqrt(lamda/b(1));
ky=sqrt((lamda*b(1))/(b(1)*b(3)-b(2)^2));
gama=-(b(2)*kx^2*ky)/lamda;
cx=(gama*cy)/kx-(b(4)*kx^2)/lamda;
%A=[kx gama cx;0 ky cy;0 0 1];      %求出内参数矩阵
A=[kx 0 cx;0 ky cy;0 0 1]      %求出内参数矩阵
mp=ones(3,49,n);                %图像坐标矩阵（合成三维形式，方便循环操作）
mp = m_one;
%para1=[kx gama cx ky cy ];
%A = [15037.6, 0, 1393.4; 0, 15085.2, 1153.8; 0, 0, 1]
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                           以下求解外参数矩阵                                        %                           
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  
inv(A)*H(:,1,1);
inv(A)*H(:,2,1);
q1=(norm(inv(A)*H(:,1,1))+norm(inv(A)*H(:,2,1)))/2;
q1=(norm(inv(A)*H(:,1,1),2)+norm(inv(A)*H(:,2,1),2))/2;

R=[];
Rm=[];
for i=1:n
    q1=(norm(inv(A)*H(:,1,i))+norm(inv(A)*H(:,2,i)))/2;      %下面求解外参数矩阵
    r1=(1/q1)*inv(A)*H(:,1,i);
    r2=(1/q1)*inv(A)*H(:,2,i);
    r3=cross(r1,r2);
    RL=[r1 r2 r3];
    [u s v]=svd(RL);
    RL=u*v';                                             %旋转矩阵正交化
    p=(1/q1)*inv(A)*H(:,3,i);
    
    RT=[r1 r2 p];
    R=[R;RT];

 %   rotationVectors = vision.internal.calibration.rodriguesMatrixToVector(RL)
 %   p;
 %   (RL-RL')/2
    sq = sqrt(RL(3,2)^2+RL(3,3)^2);
    Q1 = atan2(RL(3,2),RL(3,3));
    Q2 = atan2(-RL(3,1),sq);
    Q3 = atan2(RL(2,1),RL(1,1));
    
%     r=[cos(Q2)*cos(Q3)    sin(Q1)*sin(Q2)*cos(Q3)-cos(Q1)*sin(Q3)    cos(Q1)*sin(Q2)*cos(Q3)+sin(Q1)*sin(Q3); %旋转矩阵
%        cos(Q2)*sin(Q3)    sin(Q1)*sin(Q2)*sin(Q3)+cos(Q1)*cos(Q3)    cos(Q1)*sin(Q2)*sin(Q3)-sin(Q1)*cos(Q3); 
%        -sin(Q2)           sin(Q1)*cos(Q2)                            cos(Q1)*cos(Q2)];
%     r13=RL(1,3);
%     r12=RL(1,2);
%     r23=RL(2,3);
%     Q1=-asin(r13);              %分解出旋转矩阵中的独立变量，即三个转角
%     Q2=asin(r12/cos(Q1));
%     Q3=asin(r23/cos(Q1));
    [Q1 Q2 Q3]';
    p;
    R_new=[Q1,Q2,Q3,p'];
%    R_new=[rotationVectors',p'];
    Rm=[Rm , R_new];
    
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%           闭式解的重投影误差            %                           
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  
% R=[];
% 
% for i=1:n               %下面用来恢复出外参数矩阵
%       R_new=Rm([(i-1)*6+1 : (i-1)*6+6] );
%       Q1=R_new(1);
%       Q2=R_new(2);
%       Q3=R_new(3);
%       TL=R_new([4:6])';    
%       RL=[        cos(Q2)*cos(Q1)                                   sin(Q2)*cos(Q1)                    -sin(Q1) ; %旋转矩阵
%           -sin(Q2)*cos(Q3)+cos(Q2)*sin(Q1)*sin(Q3)    cos(Q2)*cos(Q3)+sin(Q2)*sin(Q1)*sin(Q3)   cos(Q1)*sin(Q3) ; 
%           sin(Q2)*sin(Q3)+cos(Q2)*sin(Q1)*cos(Q3)     -cos(Q2)*sin(Q3)+sin(Q2)*sin(Q1)*cos(Q3)  cos(Q1)*cos(Q3)];
%       RT=[RL(:,1:2) , TL];
%       R=[R;RT];
% end
res = ones(3,49,n);
for i=1:n
    RT=R([(i-1)*3+1 : (i-1)*3+3],:);
    x=A*RT*M;
    x=[x(1,:)./x(3,:) ; x(2,:)./x(3,:); x(3,:)./x(3,:)];		% 保证最后一列为1
    res(:,:,i) = mp(:,:,i)-x;
end

res_sum = zeros(1,98*n);
for i = 1:n
    for j = 1:49
        res_sum(1,2*((i-1)*49+j)-1) = res(1,j,i);
        res_sum(1,2*((i-1)*49+j)) = res(2,j,i);
    end
end
res_sum.*res_sum;
xxx=sum(res_sum.*res_sum);
initres = sqrt(sum(res_sum.*res_sum,2)/(n*49))

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%           下面进行最终的优化（包括内参数，三个旋转角度，平移向量和畸变系数）            %                           
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  

para=[Rm,A(1,1),A(1,3),A(2,2),A(2,3)];%优化畸变系数，内参数，外参数（平移矩阵和三个转角）
options = optimset('LargeScale','off','Algorithm','levenberg-marquardt','Display','iter');
%options = optimoptions(@lsqnonlin,'Algorithm','levenberg-marquardt',...
%                                  'TolFun',1.0e-8,...
%                                  'StepTolerance',1.0e-8,...
%                                  'Display','iter');
                                  %     'FiniteDifferenceStepSize',2,...

%options = optimoptions('lsqnonlin','FiniteDifferenceType','central');

[x,nor,res] = lsqnonlin( @fun2, para, [],[],options, mp, M, n);
A=[x(n*6+1) 0 x(n*6+2); 0 x(n*6+3) x(n*6+4); 0,0,1];
disp('最终优化过的内参数为');
disp(A);
sqrt(nor/(49*n))

% options = optimset('LargeScale','off','Algorithm','levenberg-marquardt');% 使用lsqnonlin进行非线性最小二乘求解
% [x,norm,res] = lsqnonlin( @fun2, para1 ,[],[],options, mp, M,H,n);
% A=[x(1) x(2) x(3);0 x(4) x(5);0 0 1];   % 得到优化后的内参数矩阵
% norm;
% res;

% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% %                           以下求解畸变系数                                          %                           
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  
% 
%  D=[];                       %D*K=d
%  d=[];
%     for i=1:6
%         s=(1/norm(inv(A)*H(:,1,i))+1/norm(inv(A)*H(:,2,i)))/2;
%         rl1=s*inv(A)*H(:,1,i);
%         rl2=s*inv(A)*H(:,2,i);
%         rl3=cross(rl1,rl2);
%         RL=[rl1,rl2,rl3];
%         [U,S,V] = svd(RL);
%         RL=U*V';             %保证旋转矩阵为标准正交矩阵
%         TL=s*inv(A)*H(:,3,i);
%         RT=[rl1,rl2,TL];     %单应矩阵
%         XY=RT*M;             %得到Xc、Yc、Zc
%         UV=A*XY;             %计算出图像中的坐标
%         UV=[UV(1,:)./UV(3,:); UV(2,:)./UV(3,:); UV(3,:)./UV(3,:)];%最后一行规‘1’
%         XY=[XY(1,:)./XY(3,:); XY(2,:)./XY(3,:); XY(3,:)./XY(3,:)];%x=Xc/Zc,y=Yc/Zc,r=x^2+y^2
%         for j=1:10
%             D=[D; ((UV(1,j)-u0)*( (XY(1,j))^2 + (XY(2,j))^2 )) , ((UV(1,j)-u0)*( (XY(1,j))^2 + (XY(2,j))^2 )^2) ; 
%                  ((UV(2,j)-v0)*( (XY(1,j))^2 + (XY(2,j))^2 )) , ((UV(2,j)-v0)*( (XY(1,j))^2 + (XY(2,j))^2 )^2) ];
%              
%             d=[d; (mp(1,j,i)-UV(1,j)) ; (mp(2,j,i)-UV(2,j))];
%         end
%     end
%     k=inv(D'*D)*D'*d;     %求出畸变系数
%   
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% %                      下面进行进一步的优化（包括内参数和畸变系数）                     %                           
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  
%     
%     para2=[k(1),k(2),A(1,1),A(1,2),u0,A(2,2),v0];%对畸变系数和内参数矩阵进行优化 
%     options = optimset('LargeScale','off','Algorithm','levenberg-marquardt');
%     x= lsqnonlin( @fun3,para2,[],[],options,mp,M,H);
%     k1=x(1);
%     k2=x(2);
%     K=[k1;k2];
%     A=[x(3) x(4) x(5); 0 x(6) x(7); 0,0,1];
%     disp(' ');
%     disp('优化前的内参数矩阵为：');
%     disp(A1);
%     disp('优化前的畸变系数矩阵为：');
%     disp(k);
%     disp('优化后的内参数矩阵为：');
%     disp(A);
%     disp('优化后的畸变系数矩阵为：');
%     disp(K);
%     


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%           下面进行最终的优化（包括内参数，三个旋转角度，平移向量和畸变系数）            %                           
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  
%     D=[];
%     d=[];
%     Rm=[];
%     for i=1:6                      %共用了六幅图像
%         s=(norm(inv(A)*H(:,1,i))+norm(inv(A)*H(:,2,i)))/2;
%         rl1=(1/s)*inv(A)*H(:,1,i);
%         rl2=(1/s)*inv(A)*H(:,2,i);
%         rl3=cross(rl1,rl2);
%         RL=[rl1,rl2,rl3];
%         [U,S,V] = svd(RL);
%         TL=(1/s)*inv(A)*H(:,3,i);
%         RT=[rl1,rl2,TL];
%         XY=RT*M;
%         UV=A*XY;
%         UV=[UV(1,:)./UV(3,:); UV(2,:)./UV(3,:); UV(3,:)./UV(3,:)];
%         XY=[XY(1,:)./XY(3,:); XY(2,:)./XY(3,:); XY(3,:)./XY(3,:)];
%         for j=1:10                   %每幅图取十个点
%             D=[D; ((UV(1,j)-u0)*( (XY(1,j))^2 + (XY(2,j))^2 )) , ((UV(1,j)-u0)*( (XY(1,j))^2 + (XY(2,j))^2 )^2) ; 
%                  ((UV(2,j)-v0)*( (XY(1,j))^2 + (XY(2,j))^2 )) , ((UV(2,j)-v0)*( (XY(1,j))^2 + (XY(2,j))^2 )^2) ];
%             d=[d; (mp(1,j,i)-UV(1,j)) ; (mp(2,j,i)-UV(2,j))];
%         end
%         r13=RL(1,3);
%         r12=RL(1,2);
%         r23=RL(2,3);
%         Q1=-asin(r13);              %分解出旋转矩阵中的独立变量，即三个转角
%         Q2=asin(r12/cos(Q1));
%         Q3=asin(r23/cos(Q1));
%         R_new=[Q1,Q2,Q3,TL'];
%         Rm=[Rm , R_new];
%     end
%     k=inv(D'*D)*D'*d;
%     para3=[Rm,k(1),k(2),A(1,1),A(1,2),A(1,3),A(2,2),A(2,3)];%优化畸变系数，内参数，外参数（平移矩阵和三个转角）
%     options = optimset('LargeScale','off','Algorithm','levenberg-marquardt');
%     x = lsqnonlin( @fun4, para3, [],[],options, mp, M);
%     k=[x(6*6+1);x(6*6+2)];
%     A=[x(6*6+3) x(6*6+4) x(6*6+5); 0 x(6*6+6) x(6*6+7); 0,0,1];
%     disp('最终优化过的畸变系数为');
%     disp(k);
%     disp('最终优化过的内参数为');
%     disp(A);
% 
% 
% 
% 
